" Basic vim configuration
scriptencoding utf-8
set encoding=utf-8
set nocp            " not vi-compatible, probably redundant with .vimrc?
set bs=indent,eol,start     " allow backspace to jump over these items
set ic              " ignore case
syntax on           " Syntax highlighting
filetype plugin indent on

set noerrorbells
"
" Setting filetypes
autocmd BufRead,BufNewFile *.babelrc set filetype=json
autocmd BufRead,BufNewFile *.eslintrc set filetype=json

set wildignorecase  " case insensitive file autocomplete
set mouse=a         " enable mouse
nnoremap <space> <nop>
let mapleader=' '   " Set the leader key

" https://github.com/numirias/security/blob/master/doc/2019-06-04_ace-vim-neovim.md
set nomodeline

" Auto install plug if not already installed
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" General plugins
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-surround'
Plug 'justinmk/vim-dirvish'
Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-apathy'
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
Plug 'w0rp/ale'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'airblade/vim-gitgutter'
Plug 'itchyny/lightline.vim'
" Plug 'Yggdroot/indentLine'

Plug 'plasticboy/vim-markdown'

Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-peekaboo'

" Install Coc. Install yarn if not already installed
function! InstallCoc()
  if !executable('yarn')
    !npm install -g yarn
  endif
endfunction
Plug 'neoclide/coc.nvim', { 'branch': 'release', 'do': { -> InstallCoc() }}

if !has("nvim")
  " Language specific
  Plug 'pangloss/vim-javascript'
  Plug 'groenewege/vim-less'
  " Plug 'HerringtonDarkholme/yats.vim'
  Plug 'leafgarland/typescript-vim'
  Plug 'MaxMEllon/vim-jsx-pretty'
  Plug 'styled-components/vim-styled-components', { 'branch': 'main' }
  Plug 'jparise/vim-graphql'
  Plug 'motus/pig.vim'
  Plug 'digitaltoad/vim-pug'
  Plug 'ap/vim-css-color'
else
  " Neovim specific plugins
  Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
  Plug 'nvim-lua/plenary.nvim'
  Plug 'nvim-lua/popup.nvim'
  Plug 'ThePrimeagen/harpoon'

  " let g:loaded_netrw = 1
  " let g:loaded_netrwPlugin = 1
  Plug 'nvim-tree/nvim-tree.lua'
  Plug 'nvim-tree/nvim-web-devicons'
  " Plug 'b0o/incline.nvim'

  " autopair support
  Plug 'windwp/nvim-autopairs'

  " Clojure REPL support. Not entirely sure if it works as expected though
  " Plug 'Olical/conjure'
  " Plug 'tpope/vim-dispatch'
  " Plug 'radenling/vim-dispatch-neovim'
  " Plug 'clojure-vim/vim-jack-in'

  " Plug 'neovim/nvim-lspconfig'
  " Plug 'hrsh7th/cmp-nvim-lsp'
  " Plug 'hrsh7th/cmp-buffer'
  " Plug 'hrsh7th/cmp-path'
  " Plug 'hrsh7th/nvim-cmp'

  " Plug 'L3MON4D3/LuaSnip'
  " Plug 'saadparwaiz1/cmp_luasnip'
endif

call plug#end()

set t_Co=16
colorscheme custom-nightowl

set updatetime=200 " Write swap file to disk quicker, gives faster diff updates for git-gutter
set laststatus=2 " Setting statusline configurations
" set statusline
" " Left section
" set statusline+=%{StatusLineGitBranch()}%<%f\ %h%m%r
" " Right section
" set statusline+=%=
" set statusline+=%{CodeStatus()}\ \|\%8.(%l:%v%)\ %4.(%p%%%)

set list
set listchars=tab:\│\ ,trail:·
" set fillchars+=vert:│

" Move file directories away from local directory
" The trailing // is to use absolute path
set backupdir=~/.vim/.backup//
if has("persistent_undo")
  set undofile
  set undodir=~/.vim/.undo//
endif

" Read if file has changed from outside vim
set autoread

" For checking syntax highlight of cursor
function! SynGroup()
  echo join(map(synstack(line('.'), col('.')), { key, val -> synIDattr(val, 'name') . ' -> ' . synIDattr(synIDtrans(val), 'name') }), "\n")
endfun

" Search
set incsearch
set hlsearch
" set shortmess-=S " maybe needed for vim, but not for neovim
nnoremap <silent> <leader>h :nohl<CR><Esc>

" Use ag for search
if executable('rg')
  set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case
elseif executable('ag')
  set grepprg=ag\ --vimgrep\ --follow
endif

" Populate current word in search
nnoremap <leader>sw :grep '\b<C-R>=substitute(expand("<cword>"), '#', '\\#', 'g')<CR>\b'<space>

" Autocomplete
set complete=.,b,u,] " Autocomplete sources
set wildmode=longest:full " Set autocomplete default replacement behavior
" set completeopt=menu " How menu shows

" Using splits
set splitbelow
set splitright

" Folding
set foldmethod=indent
set foldlevel=99

" Center cursor
set scrolloff=3

" line columns and ruler
set number
set numberwidth=4
set ruler
set signcolumn=yes

" indentation settings
set autoindent
set tabstop=2
set shiftwidth=2
set expandtab " tab to spaces

" webpack watching
set backupcopy=yes

" Bind j and k to move by visual line if text is there
nnoremap <silent> j gj
nnoremap <silent> k gk
nnoremap <silent> gj j
nnoremap <silent> gk k
nnoremap <silent> <Down> gj
nnoremap <silent> <Up> gk

" Center after navigating to next/previous
" nnoremap n nzz
" nnoremap N Nzz
" let g:indexed_search_center = 1
nnoremap <c-o> <c-o>zz
nnoremap <c-i> <c-i>zz

" Buffers/Windows navigation
nnoremap <leader>c :call BackBuffer() \| bd #<CR> " In case you want to leave the window open
set hidden
" Below replaced with fzf.vim jumps list
" nnoremap <silent> <leader>o :call BackBuffer()<CR>
" nnoremap <silent> <leader>i :call ForwardBuffer()<CR>

" Mapping <C-W>n to go to window n
let i = 1
while i <= 9
  execute 'nnoremap ' i . '<C-W>' . ' :' . i . 'wincmd w<CR>'
  let i = i + 1
endwhile

" Navigate via command provided until buffer changes or there are no more
" navigation changes. Mostly for the buffer changes though
function! BackBuffer()
  call UntilBufferChange("\<c-o>")
endfunction
function! ForwardBuffer()
  call UntilBufferChange("1\<c-i>")
endfunction
function! UntilBufferChange(cmd)
  let startName = bufname('%')
  let beforePos = getcurpos()[1:2]
  while 1
    exe "normal! ".a:cmd
    let nowName = bufname('%')
    let nowPos = getcurpos()[1:2]
    if nowName != startName || beforePos == nowPos
      break
    endif
    let beforePos = nowPos
  endwhile
endfunction

" Populate edit command relative to the current file
map <leader>me :e <C-R>=expand("%:p:h") . "/" <CR>
map <leader>md :!mkdir <C-R>=expand("%:p:h") . "/" <CR>

nnoremap <silent> <C-f> :silent !tmux neww tmux-s<CR>

nmap <leader>gb :Git blame<CR>
nmap <leader>gg :Git<CR>

augroup EasyClose
  autocmd!
  au FileType qf,help,fugitive,fugitiveblame,git nnoremap <buffer> q :q<CR>
augroup END

" After we're done with all the common config, check if there's a system local
" config to source
if filereadable(expand('~/.vimrc_local'))
  source ~/.vimrc_local
endif
