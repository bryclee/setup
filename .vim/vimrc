" Basic vim configuration
scriptencoding utf-8
set encoding=utf-8
set nocp            " not vi-compatible, probably redundant with .vimrc?
set bs=indent,eol,start     " allow backspace to jump over these items
set ic              " ignore case
syntax on           " Syntax highlighting
filetype plugin indent on
" Disable error bells
set noerrorbells
"
" Setting filetypes
autocmd BufRead,BufNewFile *.babelrc set filetype=json
autocmd BufRead,BufNewFile *.eslintrc set filetype=json

set wildignorecase  " case insensitive file autocomplete
set mouse=a         " enable mouse
nnoremap <space> <nop>
let mapleader=' '   " Set the leader key

" https://github.com/numirias/security/blob/master/doc/2019-06-04_ace-vim-neovim.md
set nomodeline

" Auto install plug if not already installed
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" General plugins
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-unimpaired'
Plug 'henrik/vim-indexed-search'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-surround'
Plug 'justinmk/vim-dirvish'
Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-apathy'
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
Plug 'w0rp/ale'
" Plug 'rstacruz/vim-closer'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'airblade/vim-gitgutter'
Plug 'junegunn/goyo.vim'

Plug 'plasticboy/vim-markdown'

Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'

if !has("nvim")
  "
  " Install Coc. Install yarn if not already installed
  function! InstallCoc()
    if !executable('yarn')
      !npm install -g yarn
    endif
  endfunction
  Plug 'neoclide/coc.nvim', { 'branch': 'release', 'do': { -> InstallCoc() }}


  " Language specific
  Plug 'pangloss/vim-javascript'
  Plug 'groenewege/vim-less'
  " Plug 'HerringtonDarkholme/yats.vim'
  Plug 'leafgarland/typescript-vim'
  Plug 'MaxMEllon/vim-jsx-pretty'
  Plug 'ap/vim-css-color'
  Plug 'styled-components/vim-styled-components', { 'branch': 'main' }
  Plug 'jparise/vim-graphql'
  Plug 'motus/pig.vim'
  Plug 'digitaltoad/vim-pug'
else
  Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate', 'branch': '0.5-compat'}
  Plug 'nvim-lua/plenary.nvim'
  Plug 'nvim-lua/popup.nvim'
  Plug 'ThePrimeagen/harpoon'
  " Plug 'nvim-telescope/telescope.nvim'
  " Plug 'nvim-telescope/telescope-fzf-native.nvim', { 'do': 'make' }

  Plug 'neovim/nvim-lspconfig'
  Plug 'hrsh7th/cmp-nvim-lsp'
  Plug 'hrsh7th/cmp-buffer'
  Plug 'hrsh7th/cmp-path'
  Plug 'hrsh7th/nvim-cmp'

  Plug 'L3MON4D3/LuaSnip'
  Plug 'saadparwaiz1/cmp_luasnip'
endif

call plug#end()

set t_Co=256
colorscheme custom

set updatetime=200 " Write swap file to disk quicker, gives faster diff updates for git-gutter
set laststatus=2 " Setting statusline configurations
function! StatusLineGitBranch()
  if fugitive#head() != ''
    return fugitive#head() . ' | '
  else
    return ''
  endif
endfunction
function! CodeStatus() abort
  let info = ale#statusline#Count(bufnr('%'))
  let msgs = []
  if get(info, 'error', 0)
    call add(msgs, '!' . info['error'])
  endif
  if get(info, 'warning', 0)
    call add(msgs, '?' . info['warning'])
  endif
  if len(get(g:, 'coc_status', ''))
    call add(msgs, get(g:, 'coc_status', ''))
  endif
  return join(msgs, ',')
endfunction
set statusline=
" Left section
set statusline+=%{StatusLineGitBranch()}%<%f\ %h%m%r
" Right section
set statusline+=%=
set statusline+=%{CodeStatus()}\ \|\%8.(%l:%v%)\ %4.(%p%%%)

set list
set listchars=tab:\│\ ,trail:·
" set fillchars+=vert:│

" Move file directories away from local directory
" The trailing // is to use absolute path
set backupdir=~/.vim/.backup//
if has("persistent_undo")
  set undofile
  set undodir=~/.vim/.undo//
endif

" Read if file has changed from outside vim
set autoread

" For checking syntax highlight of cursor
function! SynGroup()
  echo join(map(synstack(line('.'), col('.')), { key, val -> synIDattr(val, 'name') . ' -> ' . synIDattr(synIDtrans(val), 'name') }), "\n")
endfun

" Search
set incsearch
set nohlsearch
nnoremap <Leader><Leader> :set hls!<CR><Esc>

augroup vimrc-incsearch-highlight
  autocmd!
  autocmd CmdlineEnter /,\? :set hlsearch
  autocmd CmdlineLeave /,\? :set nohlsearch
augroup END

" Use ag for search
if executable('rg')
  set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case
elseif executable('ag')
  set grepprg=ag\ --vimgrep\ --follow
endif

" Populate current word in search
if executable('rg')
  nnoremap <leader>/ :Rg \b<C-R>=substitute(expand("<cword>"), '#', '\\#', 'g')<CR>\b<CR>
else
  nnoremap <leader>/ :grep '\b<C-R>=substitute(expand("<cword>"), '#', '\\#', 'g')<CR>\b'<space>
endif

" Autocomplete
set complete=.,b,u,] " Autocomplete sources
set wildmode=list:longest " Set autocomplete default replacement behavior
" set completeopt=menu " How menu shows

" Using splits
set splitbelow
set splitright

" Folding
set foldmethod=indent
set foldlevel=99

" Center cursor
set scrolloff=3

" line columns and ruler
set number
set numberwidth=4
set ruler
set signcolumn=yes

" indentation settings
set autoindent
set tabstop=2
set shiftwidth=2
set expandtab " tab to spaces

" webpack watching
set backupcopy=yes

" Bind j and k to move by visual line if text is there
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k

" Center after navigating to next/previous
" nnoremap n nzz
" nnoremap N Nzz
" let g:indexed_search_center = 1
nnoremap <c-o> <c-o>zz
nnoremap <c-i> <c-i>zz

" Buffers/Windows navigation
nnoremap <leader>bd :call BackBuffer() \| bd #<CR> " In case you want to leave the window open
set hidden
nnoremap <silent> <leader>o :call BackBuffer()<CR>
nnoremap <silent> <leader>i :call ForwardBuffer()<CR>

" Mapping <C-W>n to go to window n
let i = 1
while i <= 9
  execute 'nnoremap ' i . '<C-W>' . ' :' . i . 'wincmd w<CR>'
  let i = i + 1
endwhile

" Navigate via command provided until buffer changes or there are no more
" navigation changes. Mostly for the buffer changes though
function! BackBuffer()
  call UntilBufferChange("\<c-o>")
endfunction
function! ForwardBuffer()
  call UntilBufferChange("1\<c-i>")
endfunction
function! UntilBufferChange(cmd)
  let startName = bufname('%')
  let beforePos = getcurpos()[1:2]
  while 1
    exe "normal! ".a:cmd
    let nowName = bufname('%')
    let nowPos = getcurpos()[1:2]
    if nowName != startName || beforePos == nowPos
      break
    endif
    let beforePos = nowPos
  endwhile
endfunction

" Populate edit command relative to the current file
map <leader>e :e <C-R>=expand("%:p:h") . "/" <CR>
map <leader>md :!mkdir <C-R>=expand("%:p:h") . "/" <CR>

nnoremap <silent> <C-f> :silent !tmux neww tmux-s<CR>

" After we're done with all the common config, check if there's a system local
" config to source
if filereadable(expand('~/.vimrc_local'))
  source ~/.vimrc_local
endif

" augroup SyntaxSync
"   autocmd!
"   au BufEnter *.js,*.jsx,*.ts,*.tsx,*.graphql syntax sync fromstart
"   " au BufLeave *.js,*.jsx,*.ts,*.tsx,*.graphql syntax sync clear
" augroup END
