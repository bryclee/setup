" Basic vim configuration
scriptencoding utf-8
set encoding=utf-8
set nocp            " not vi-compatible, probably redundant with .vimrc?
set bs=indent,eol,start     " allow backspace to jump over these items
set ic              " ignore case
syntax on           " Syntax highlighting
filetype plugin indent on
" Disable bell sound with visualbell and disable flashing
set visualbell
set t_vb=
" Setting filetypes
autocmd BufRead,BufNewFile *.babelrc set filetype=json
autocmd BufRead,BufNewFile *.eslintrc set filetype=json
set path+=**        " improve find
set wildignorecase  " case insensitive file autocomplete
set mouse=a         " enable mouse
let mapleader=','   " Set the leader key

" Auto install plug if not already installed
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-eunuch'
" [Buffers] Jump to existing window if possible
let g:fzf_buffers_jump = 1
" General pugins
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
autocmd! filetype fzf
autocmd  filetype fzf set laststatus=0
  \| autocmd BufLeave <buffer> set laststatus=2
map <C-T> :FZF<CR>
map <C-P> :Buffers<CR>

" Colorschemes
Plug 'jeffkreeftmeijer/vim-dim'
Plug 'NLKNguyen/papercolor-theme'

Plug 'w0rp/ale'
let g:ale_linters = {
            \ 'javascript': ['eslint'],
            \ 'javascript.jsx': ['eslint'],
            \ 'typescript': ['tslint', 'tsserver'],
            \ 'typescript.tsx': ['tslint', 'tsserver']
            \ }
let g:ale_lint_delay = 300
nnoremap <silent> [d :ALENextWrap<CR>
nnoremap <silent> ]d :ALEPreviousWrap<CR>

" The issue with this is that it closes the pair in cases where I don't want
" it to. So let's see if this is better disabled - otherwise will have to
" spend more time to figure out a way to better match expectations.
" Plug 'jiangmiao/auto-pairs'
" let g:AutoPairsMapSpace = 0
" let g:AutoPairsMultilineClose = 0

Plug 'vim-airline/vim-airline'
set noshowmode
set laststatus=2
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#tab_min_count = 2
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#show_splits = 0
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
let g:airline#extensions#tabline#tab_nr_type = 2
let g:airline#extensions#tabline#show_close_button = 0
" let g:airline_theme='dark'
" hide the default mode line
" let g:airline_powerline_fonts = 1 " (OPTIONAL) show powerline fonts
" Trimming some sections earlier so more of the file path can be shown
    " airline_section_b (hunks, branch)
    " airline_section_y (fileencoding, fileformat)
let g:airline#extensions#default#section_truncate_width = {
    \ 'b': 110,
    \ 'y': 120
    \ }
" Abbreviating the vim mode mapping in the bottom left corner
let g:airline_mode_map = {
    \ 'n'   : 'NOR',
    \ 'i'   : 'INS',
    \ 'v'   : 'VIS',
    \ 'V'   : 'VIS',
    \ '^V'  : 'VIS',
    \ }

Plug 'simnalamburt/vim-mundo'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
set updatetime=500 " Write swap file to disk quicker, also gives faster diff updates
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-surround'
Plug 'alvan/vim-closetag', { 'for': 'html,*javascript*' }
let g:closetag_filenames = '*.html,*.js,*.jsx,*.tsx'
let g:closetag_xhtml_filenames = '*.js,*.jsx,*.tsx'
let g:closetag_emptyTags_caseSensitive = 1
Plug 'justinmk/vim-dirvish'
let g:dirvish_mode = ':sort ,^.*[\/],'
augroup dirvish_config
  autocmd!
  " autocmd filetype dirvish silent! unmap <buffer> /
  " autocmd filetype dirvish silent! unmap <buffer> ?
  autocmd filetype dirvish silent! unmap <buffer> p
  autocmd filetype dirvish setlocal nonumber
augroup END
Plug 'tpope/vim-vinegar'

" Goyo is nice for text editing. Use :Goyo and :Goyo! to enter goyo mode.
Plug 'junegunn/goyo.vim'
let g:goyo_width = 90
autocmd! User GoyoEnter set linebreak
autocmd! User GoyoLeave set nolinebreak

" LSP
" Install Coc. Install yarn if not already installed
function InstallCoc()
  if !executable('yarn')
    !npm install -g yarn
  endif
  call coc#util#install()
endfunction
Plug 'neoclide/coc.nvim', {'tag': '*', 'do': { -> InstallCoc() }}

" coc.nvim
" ===================
" Set tab completion
inoremap <silent><expr> <TAB>
  \ pumvisible() ? "\<C-y>" : "\<TAB>"
inoremap <silent><expr> <ENTER>
  \ pumvisible() ? "\<C-e><ENTER>" : "\<ENTER>"

" " Checks last character is space
" function! s:check_back_space() abort
"   let col = col('.') - 1
"   return !col || getline('.')[col - 1] =~# '\s'
" endfunction

" Go to definition
nmap <silent> <leader>d <Plug>(coc-definition)
nmap <silent> <C-W><leader>d :call CocActionAsync('jumpDefinition', 'tabe')<CR>
nmap <silent> <leader>i <Plug>(coc-implementation)
nmap <silent> <leader>r <Plug>(coc-references)
nmap <silent> <leader>R <Plug>(coc-rename)
nmap <silent> [d <Plug>(coc-diagnostic-prev)
nmap <silent> ]d <Plug>(coc-diagnostic-next)
inoremap <silent><expr> <c-space> coc#refresh()

" Language specific
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'groenewege/vim-less'
Plug 'ap/vim-css-color'
Plug 'styled-components/vim-styled-components', { 'branch': 'main' }
" Pinned because latest does not properly source config from vimrc prettier config if no project config
Plug 'prettier/vim-prettier', { 'do': 'npm install -g prettier', 'commit': 'e440d85' }
Plug 'flowtype/vim-flow', { 'do': 'npm install -g flow-bin' }
Plug 'leafgarland/typescript-vim'
Plug 'ianks/vim-tsx'
Plug 'motus/pig.vim'
Plug 'jparise/vim-graphql'
Plug 'digitaltoad/vim-pug'

call plug#end()

set t_Co=256
set background=dark
colorscheme PaperColor
" custom colors/highlighting
augroup CursorLineActiveWindow
  autocmd!
  autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  autocmd WinLeave * setlocal nocursorline
augroup END
highlight CursorLine term=none cterm=none
" highlight CursorLineNr ctermfg=white ctermbg=darkgray
highlight DiffAdd ctermfg=green ctermbg=none
highlight DiffChange ctermfg=yellow ctermbg=none
highlight DiffDelete ctermfg=red ctermbg=none
" Highlight looks kinda bad specifically with the iterm2 dracula color scheme.
" Can change this later if needed
highlight Search ctermbg=blue
highlight SpellBad term=standout cterm=underline ctermbg=none

" Move file directories away from local directory
" The trailing // is to use absolute path
set backupdir=~/.vim/.backup//

" Read if file has changed from outside vim
set autoread

" Force markdown highlighting for *.md
autocmd BufNewFile,BufReadPost *.md set filetype=markdown

function TrimStr(str)
  return substitute(a:str, '^\s*\(.\{-}\)\s*$', '\1', '')
endfunction

" Trim trailing whitespace on write.
function TrimWhiteSpace()
    " Save the last searched
    let _s = @/
    " Save the current cursor position
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    let @/ = _s
    call cursor(l, c)
endfunction
" Autotrim on write...
" autocmd BufWritePre * call TrimWhiteSpace()
nnoremap <leader>w :call TrimWhiteSpace()<CR>:w<CR>

" Trailing dots showing whitespace
set list
set listchars=tab:\|\ ,trail:Â·

" Function for toggling a property
" Usage: NMapToggle <keybinding> <string property name>
function NMapToggle(key, opt)
    " Create chained command string, toggle property and get value of property
    let cmd = ':set '.a:opt.'! \| set '.a:opt."?\<CR>"
    " nnoremap with new cmd
    exec 'nnoremap '.a:key.' '.cmd
endfunction
" Apply variable number of args to NMapToggle?
command -nargs=+ NMapToggle call NMapToggle(<f-args>)

" Search
set incsearch
set hlsearch
nnoremap <silent> <Leader><Leader> :noh<CR><Esc>
" Use ag for search
if executable('ag')
    command! -nargs=+ -complete=file Ag cexpr system('echo ' . shellescape('<args>'))
    set grepprg=ag\ --nogroup\ --nocolor\ --follow
endif

" Autocomplete
set wildmenu    " display autocomplete options in command menu
set complete=.,b,u,] " Autocomplete sources
set wildmode=longest,list:longest " Set autocomplete default replacement behavior
set completeopt=menu " How menu shows

" Bind j and k to move by visual line if text is there
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k

" Buffers
nnoremap <leader>bd :b# <BAR> bd #<CR> " In case you want to leave the window
set hidden
nnoremap <silent> <leader>o :call BackBuffer()<CR>
nnoremap <silent> <leader>i :call ForwardBuffer()<CR>

" Navigate via command provided until buffer changes or there are no more
" navigation changes. Mostly for the buffer changes though
function! BackBuffer()
  call UntilBufferChange("\<c-o>")
endfunction
function! ForwardBuffer()
  call UntilBufferChange("1\<c-i>")
endfunction
function! UntilBufferChange(cmd)
  let startName = bufname('%')
  let beforePos = getcurpos()[1:2]
  while 1
    exe "normal! ".a:cmd
    let nowName = bufname('%')
    let nowPos = getcurpos()[1:2]
    if nowName != startName || beforePos == nowPos
      break
    endif
    let beforePos = nowPos
  endwhile
endfunction

" Using splits
set splitbelow
set splitright

" split line
nnoremap K i<CR><Esc>l :call TrimWhiteSpace()<CR>

" swapping lines
nnoremap <C-j> :m .+1<CR>
nnoremap <C-k> :m .-2<CR>
inoremap <C-j> <Esc>:m .+1<CR>
inoremap <C-k> <Esc>:m .-2<CR>
vnoremap <C-j> :m '>+1<CR>gv
vnoremap <C-k> :m '<-2<CR>gv

" Folding
set foldmethod=indent
set foldlevel=99

" Center cursor
set scrolloff=3

" line columns and ruler
set number
set numberwidth=4
set ruler
set signcolumn=yes

" indentation settings
set autoindent
set tabstop=4
set shiftwidth=4
set expandtab " tab to spaces

" Populate edit command relative to the current file
map <leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

" webpack watching
set backupcopy=yes

" Allow loading of js files from paths described in json files... most common
" use case
autocmd Filetype json set suffixesadd+=.js

" mundo.vim
" =========
if has("persistent_undo")
    set undofile
    set undodir=~/.vim/.undo//
endif
nnoremap <leader>u :MundoToggle<CR>

" vim-flow
" ========
let g:flow#autoclose = 1
let g:flow#omnifunc = 0
let g:flow#enable = 0

" Prettier
" ========
nnoremap <leader>P :PrettierAsync<CR>:w<CR>
let external_prettier = TrimStr(system('which prettier'))
if !empty(external_prettier)
  let g:prettier#exec_cmd_path = external_prettier
endif
let g:prettier#config#config_precedence = 'prefer-file'
let g:prettier#config#tab_width = 4
let g:prettier#config#single_quote = 'true'
let g:prettier#config#trailing_comma = 'none'
let g:prettier#config#bracket_spacing = 'true'
let g:prettier#config#print_width = 120

" vim-javascript
" ==============
let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_flow = 1

" coc.nvim
" ===================
" Set tab completion
" inoremap <silent><expr> <TAB>
"   \ pumvisible() ? "\<C-n>" :
"   \ <SID>check_back_space() ? "\<TAB>" :
"   \ coc#refresh()
" inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" function! s:check_back_space() abort
"   let col = col('.') - 1
"   return !col || getline('.')[col - 1] =~# '\s'
" endfunction

" After we're done with all the common config, check if there's a system local
" config to source
if filereadable(expand('~/.vimrc_local'))
  source ~/.vimrc_local
endif

