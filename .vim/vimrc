scriptencoding utf-8
set encoding=utf-8

" Auto install plug if not already installed
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" General pugins
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'w0rp/ale'
Plug 'jiangmiao/auto-pairs'
Plug 'vim-airline/vim-airline'
Plug 'simnalamburt/vim-mundo'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-surround'

" Language specific
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'groenewege/vim-less'
Plug 'ap/vim-css-color'
" Pinned because latest does not properly source config from vimrc prettier config if no project config
Plug 'prettier/vim-prettier', { 'do': 'npm install -g prettier', 'commit': 'e440d85' }
Plug 'flowtype/vim-flow', { 'do': 'npm install -g flow-bin' }
Plug 'leafgarland/typescript-vim'
Plug 'motus/pig.vim'
Plug 'jparise/vim-graphql'

call plug#end()

set nocp    " not vi-compatible, probably redundant with .vimrc?
set bs=indent,eol,start     " allow backspace to jump over these items
set ic      " ignore case
syntax on   " Syntax highlighting
filetype plugin indent on

" Setting filetypes
autocmd BufRead,BufNewFile *.babelrc set filetype=json
autocmd BufRead,BufNewFile *.eslintrc set filetype=json

" Disable bell sound with visualbell and disable flashing
set visualbell
set t_vb=

set path+=**    " improve find
set wildignorecase      " case insensitive file autocomplete

" enable mouse
set mouse=a

" Set the leader key
let mapleader=','

" Move file directories away from local directory
" The trailing // is to use absolute path
set backupdir=~/.vim/.backup//

" Read if file has changed from outside vim
set autoread

" Force markdown highlighting for *.md
autocmd BufNewFile,BufReadPost *.md set filetype=markdown

" Trim trailing whitespace on write.
function TrimWhiteSpace()
    " Save the last searched
    let _s = @/
    " Save the current cursor position
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    let @/ = _s
    call cursor(l, c)
endfunction
" Autotrim on write...
" autocmd BufWritePre * call TrimWhiteSpace()
nnoremap <leader>w :call TrimWhiteSpace()<CR>:w<CR>

" Trailing dots showing whitespace
set list
set listchars=tab:\|\ ,trail:Â·

" Function for toggling a property
" Usage: NMapToggle <keybinding> <string property name>
function NMapToggle(key, opt)
    " Create chained command string, toggle property and get value of property
    let cmd = ':set '.a:opt.'! \| set '.a:opt."?\<CR>"
    " nnoremap with new cmd
    exec 'nnoremap '.a:key.' '.cmd
endfunction
" Apply variable number of args to NMapToggle?
command -nargs=+ NMapToggle call NMapToggle(<f-args>)

" Search
set incsearch
set hlsearch
nnoremap <silent> <Leader><Leader> :noh<CR><Esc>
" Use ag for search
if executable('ag')
    command! -nargs=+ -complete=file Ag cexpr system('echo ' . shellescape('<args>'))
    set grepprg=ag\ --nogroup\ --nocolor\ --follow
endif

" Autocomplete
set wildmenu    " display autocomplete options in command menu
set complete=.,b,u,] " Autocomplete sources
set wildmode=longest,list:longest " Set autocomplete default replacement behavior
set completeopt=menu,preview " How menu shows

" Bind j and k to move by visual line if text is there
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k

" Buffers
nnoremap <C-J> :bp<CR>
nnoremap <C-K> :bn<CR>
nnoremap <leader>d :b# <BAR> bd #<CR> " In case you want to leave the window
set hidden

" Using splits
set splitbelow
set splitright

" split line
nnoremap K i<CR><Esc>l

" Folding
set foldmethod=indent
set foldlevel=99

" Center cursor
set scrolloff=5

" line columns and ruler
set number
set numberwidth=4
set ruler

" indentation settings
set autoindent
set tabstop=4
set shiftwidth=4
set expandtab " tab to spaces

" netrw settings
" ==============
" let g:netrw_browse_split = 4 " Open the file when hitting <CR> in the original window
let g:netrw_banner = 0

" Populate edit command relative to the current file
map <leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

" webpack watching
set backupcopy=yes

" airline configurations
" ======================
set laststatus=2
set t_Co=256
let g:airline#extensions#tabline#enabled = 0
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline_theme='dark'
" hide the default mode line
set noshowmode 
let g:airline_powerline_fonts = 1 " (OPTIONAL) show powerline fonts
" Trimming some sections earlier so more of the file path can be shown
    " airline_section_b (hunks, branch)
    " airline_section_y (fileencoding, fileformat)
let g:airline#extensions#default#section_truncate_width = {
    \ 'b': 110,
    \ 'y': 120
    \ }
" Abbreviating the vim mode mapping in the bottom left corner
let g:airline_mode_map = {
    \ 'n'   : 'NOR',
    \ 'i'   : 'INS',
    \ 'v'   : 'VIS',
    \ 'V'   : 'VIS',
    \ '^V'  : 'VIS',
    \ }

" FZF
" =========
map <C-T> :FZF<CR>
map <C-Y> :call fzf#run(fzf#wrap(
    \ { 'source': "find * -path '*/\.*' -prune -o -type d -print" }))<CR>
map <C-P> :Buffers<CR>


" vim-sexp
" ========
" nmap <LocalLeader>( <Plug>(sexp_round_head_wrap_list)
" nmap <LocalLeader>) <Plug>(sexp_round_tail_wrap_list)
" nmap <LocalLeader>e( <Plug>(sexp_round_head_wrap_element)
" nmap <LocalLeader>e) <Plug>(sexp_round_tail_wrap_element)

" gundo.vim
" =========
if has("persistent_undo")
    set undofile
    set undodir=~/.vim/.undo//
endif
" nnoremap <leader>u :UndotreeToggle<CR>
nnoremap <leader>u :MundoToggle<CR>

" ALE options
let g:ale_linters = {
            \ 'javascript': ['eslint'],
            \}
let g:ale_lint_delay = 500

" vim-flow
" ========
let g:flow#autoclose = 1

" Prettier
" ========
nnoremap <leader>P :PrettierAsync<CR>
let g:prettier#config#tab_width = 4
let g:prettier#config#single_quote = 'true'
let g:prettier#config#trailing_comma = 'none'
let g:prettier#config#bracket_spacing = 'true'
let g:prettier#config#config_precedence = 'prefer-file'
let g:prettier#config#print_width = 120
