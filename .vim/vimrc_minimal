" This is a config file with the minimum vim setup needed to launch with coc,
" for debugging purposes

" For nvim
set runtimepath^=~/.vim runtimepath+=~/.vim/after
let &packpath =&runtimepath

set nocp

call plug#begin('~/.vim/plugged')

" Plug 'neoclide/coc.nvim', {'tag': '*', 'do': { -> coc#util#install() }}
Plug 'neoclide/coc.nvim', {'tag': '*', 'do': { -> InstallCoc() }}
" Plug 'tmsvg/pear-tree'
" let g:pear_tree_repeatable_expand = 0
" let g:pear_tree_smart_openers = 1
" let g:pear_tree_smart_closers = 1
" let g:pear_tree_smart_backspace = 1
" let g:pear_tree_pairs = {
"             \ '(': {'closer': ')', 'not_in': ['Comment']},
"             \ '{': {'closer': '}', 'not_in': ['Comment']},
"             \ '[': {'closer': ']', 'not_in': ['Comment']}
"             \ }

call plug#end()

set hidden
nmap <silent> gh :call CocAction('doHover')<CR>

" inoremap <silent><expr> <TAB>
"   \ pumvisible() ? "\<C-n>" :
"   \ <SID>check_back_space() ? "\<TAB>" :
"   \ coc#refresh()
" inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" function! s:check_back_space() abort
"   let col = col('.') - 1
"   return !col || getline('.')[col - 1] =~# '\s'
" endfunction

" " Go to definition
" nmap <silent> <leader>d <Plug>(coc-definition)
" nmap <silent> <leader>i <Plug>(coc-implementation)
" nmap <silent> <leader>r <Plug>(coc-references)
